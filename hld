#! /bin/bash
# TODO
# - unjail command
# - top50 command
# - lookup-validator command

VERSION="1.0.0"
COMPOSE_FILES="-f docker-compose.yml"

# Help message
show_help() {
    echo "Hyperliquid Docker CLI Tool v${VERSION}"
    echo
    echo "Usage: hld [OPTIONS] COMMAND"
    echo
    echo "Options:"
    echo "  --help     Show this help message"
    echo "  --version  Show version information"
    echo
    echo "Commands:"
    echo "  up        Start containers (docker compose up)"
    echo "  update    Update code and rebuild containers"
    echo "  down      Stop and remove containers"
    echo "  restart   Restart containers"
    echo "  logs      Follow container logs (docker compose logs -f)"
    echo "  vstatus   Check validator status"
    echo "  vtop      List top N validators by stake (default: 50)"
    echo "  exec      Execute a command in a container"
    echo
    echo "Environment Variables (.env):"
    echo "  VALIDATOR=true/false  Configure node/validator replicas"
    echo "  PRUNER=true/false    Enable/disable pruner service"
}

# Version info
show_version() {
    echo "hld version ${VERSION}"
}

# Load environment variables
load_env() {
    if [ -f .env ]; then
        source .env
    fi

    # Validate VALIDATOR setting
    if [ -z "$VALIDATOR" ]; then
        echo "Error: VALIDATOR must be set to true or false in .env"
        exit 1
    fi
}

# Function to check if jq is installed
check_jq() {
    if ! command -v jq &> /dev/null; then
        echo "Error: jq is not installed"
        echo "Please install jq to use this command:"
        echo "  Ubuntu/Debian: sudo apt-get install jq"
        echo "  MacOS: brew install jq"
        echo "  CentOS/RHEL: sudo yum install jq"
        exit 1
    fi
}

# Get validator status
vstatus() {
    check_jq

    if [ -z "$1" ]; then
        echo "Error: Validator name is required"
        echo "Usage: hld vstatus <validator-name>"
        exit 1
    fi

    curl -X POST \
        --header "Content-Type: application/json" \
        --data '{ "type": "validatorSummaries"}' \
        https://api.hyperliquid-testnet.xyz/info | \
        jq --arg validator "$1" '.[] | select(.name == $validator)'
}

# Get top N validators
vtop() {
    check_jq

    local count=${1:-50}
    if ! [[ "$count" =~ ^[0-9]+$ ]]; then
        echo "Error: Please provide a valid number"
        echo "Usage: hld vtop [number]"
        exit 1
    fi

    curl -X POST \
        --header "Content-Type: application/json" \
        --data '{ "type": "validatorSummaries"}' \
        https://api.hyperliquid-testnet.xyz/info | \
        jq -r --arg n "$count" 'sort_by(.stake) | reverse | .[:($n|tonumber)] | to_entries | map({
            index: (.key + 1),
            name: .value.name,
            stake: (.value.stake / 100000000),
            isJailed: .value.isJailed,
            isActive: .value.isActive
        })'
}

# Handle exec command
handle_exec() {
    if [ -z "$1" ]; then
        echo "Error: Service name required"
        echo "Usage: hld exec <service>"
        echo "Services: validator, node, pruner"
        exit 1
    fi

    case "$1" in
        validator|node|pruner)
            container_name="hyperliquid-${1}-1"
            if ! docker ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
                echo "Error: Container ${container_name} is not running"
                exit 1
            fi
            docker exec -it "${container_name}" bash
            ;;
        *)
            echo "Error: Invalid service name '$1'"
            echo "Valid services: validator, node, pruner"
            exit 1
            ;;
    esac
}

# Validate environment settings
validate_env() {
    # Check required variables
    if [ -z "$CHAIN" ]; then
        echo "Error: CHAIN must be set in .env"
        exit 1
    fi

    if [ -z "$VALIDATOR" ]; then
        echo "Error: VALIDATOR must be set to true or false in .env"
        exit 1
    fi

    if [ -z "$PRUNER" ]; then
        echo "Error: PRUNER must be set to true or false in .env"
        exit 1
    fi

    # Check validator-specific requirements
    if [ "$VALIDATOR" = "true" ]; then
        if [ -z "$SIGNER_KEY" ]; then
            echo "Error: SIGNER_KEY is required when VALIDATOR=true"
            exit 1
        fi
    fi

    # Check that either all OVERRIDE_* are set or none are set
    if [ ! -z "$OVERRIDE_PEER_IPS" ] || [ ! -z "$OVERRIDE_TRY_NEW_PEERS" ]; then
        if [ -z "$OVERRIDE_PEER_IPS" ] || [ -z "$OVERRIDE_TRY_NEW_PEERS" ]; then
            echo "Error: When using overrides, both OVERRIDE_PEER_IPS and OVERRIDE_TRY_NEW_PEERS must be set"
            exit 1
        fi
    fi
}

# Handle up command
handle_up() {
    validate_env

    # Build scale arguments based on configuration
    local scale_args=""
    if [ "$VALIDATOR" = "true" ]; then
        scale_args="--scale validator=1 --scale node=0"
    else
        scale_args="--scale validator=0 --scale node=1"
    fi

    scale_args="$scale_args --scale pruner=$([ "$PRUNER" = "true" ] && echo "1" || echo "0")"

    # Start the containers
    docker compose $COMPOSE_FILES build && docker compose $COMPOSE_FILES up -d $scale_args
}

# Handle logs command
handle_logs() {
    if [ -z "$1" ]; then
        # If no service specified, show all logs
        docker compose $COMPOSE_FILES logs -f
        return
    fi

    # Check if service exists in docker-compose
    if ! docker compose $COMPOSE_FILES ps "$1" >/dev/null 2>&1; then
        echo "Error: Service '$1' not found"
        echo "Available services:"
        docker compose $COMPOSE_FILES ps --services
        exit 1
    fi

    docker compose $COMPOSE_FILES logs -f "$1"
}

# Main command processing
load_env

case "$1" in
    --help)
        show_help
        exit 0
        ;;
    --version)
        show_version
        exit 0
        ;;
    up)
        handle_up
        ;;
    update)
        git pull
        handle_up
        ;;
    down)
        docker compose $COMPOSE_FILES down
        ;;
    restart)
        docker compose $COMPOSE_FILES restart
        ;;
    logs)
        handle_logs "$2"
        ;;
    vstatus)
        vstatus "$2"
        ;;
    vtop)
        vtop "$2"
        ;;
    exec)
        handle_exec "$2"
        ;;
    *)
        echo "Error: Unknown command '$1'"
        echo "Run 'hld --help' for usage information"
        exit 1
        ;;
esac